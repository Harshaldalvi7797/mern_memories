[{"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\Posts.js":"1","E:\\MERN\\mern_memories\\client\\src\\actions\\posts.js":"2","E:\\MERN\\mern_memories\\client\\src\\api\\index.js":"3","E:\\MERN\\mern_memories\\client\\src\\index.js":"4","E:\\MERN\\mern_memories\\client\\src\\reducers\\index.js":"5","E:\\MERN\\mern_memories\\client\\src\\reducers\\posts.js":"6","E:\\MERN\\mern_memories\\client\\src\\App.js":"7","E:\\MERN\\mern_memories\\client\\src\\components\\Form\\styles.js":"8","E:\\MERN\\mern_memories\\client\\src\\components\\posts\\post\\Post.js":"9","E:\\MERN\\mern_memories\\client\\src\\components\\posts\\styles.js":"10","E:\\MERN\\mern_memories\\client\\src\\components\\Form\\Form.js":"11","E:\\MERN\\mern_memories\\client\\src\\components\\posts\\post\\styles.js":"12","E:\\MERN\\mern_memories\\client\\src\\styles.js":"13"},{"size":773,"mtime":1606895450179,"results":"14","hashOfConfig":"15"},{"size":1112,"mtime":1606922985291,"results":"16","hashOfConfig":"15"},{"size":359,"mtime":1606922864399,"results":"17","hashOfConfig":"15"},{"size":756,"mtime":1606907367964,"results":"18","hashOfConfig":"15"},{"size":297,"mtime":1606761182702,"results":"19","hashOfConfig":"15"},{"size":638,"mtime":1606923185037,"results":"20","hashOfConfig":"15"},{"size":1499,"mtime":1606917988102,"results":"21","hashOfConfig":"15"},{"size":458,"mtime":1606742354157,"results":"22","hashOfConfig":"15"},{"size":2299,"mtime":1606924572983,"results":"23","hashOfConfig":"15"},{"size":126,"mtime":1606845069592,"results":"24","hashOfConfig":"15"},{"size":3669,"mtime":1606920503722,"results":"25","hashOfConfig":"15"},{"size":1022,"mtime":1606856410509,"results":"26","hashOfConfig":"15"},{"size":406,"mtime":1606675517026,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ypyv4h",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\Posts.js",[],"E:\\MERN\\mern_memories\\client\\src\\actions\\posts.js",["56"],"/** @format */\r\n\r\nimport * as api from \"../api/index\";\r\nimport { FETCH_ALL, CREATE, UPDATE, DELETE } from \"../constants/actionTypes\";\r\n\r\n//Actions creator\r\n\r\nexport const getPosts = () => async dispatch => {\r\n  try {\r\n    const { data } = await api.fetchPosts();\r\n    // const action = { type: FETCH_ALL, payload: data };\r\n    dispatch({ type: FETCH_ALL, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const createPost = post => async dispatch => {\r\n  try {\r\n    const data = await api.createPost(post);\r\n    dispatch({ type: CREATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const updatePost = (id, post) => async dispatch => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post);\r\n    dispatch({ type: UPDATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const deletePost = id => async dispatch => {\r\n  try {\r\n    const response = await api.deletePost(id);\r\n    dispatch({ type: DELETE, payload: id });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n","E:\\MERN\\mern_memories\\client\\src\\api\\index.js",[],"E:\\MERN\\mern_memories\\client\\src\\index.js",[],"E:\\MERN\\mern_memories\\client\\src\\reducers\\index.js",[],"E:\\MERN\\mern_memories\\client\\src\\reducers\\posts.js",["57"],"/** @format */\r\nimport { FETCH_ALL, CREATE, UPDATE, DELETE } from \"../constants/actionTypes\";\r\n\r\nexport default (posts = [], action) => {\r\n  switch (action.type) {\r\n    case UPDATE:\r\n      return posts.map(post =>\r\n        post._id === action.payload._id ? action.payload : post\r\n      );\r\n    // return posts.map(post =>\r\n    //   post._id === action.payload._id ? action.payload : post\r\n    // );\r\n    case DELETE:\r\n      return posts.filter(post => post._id !== action.payload);\r\n    case FETCH_ALL:\r\n      return action.payload;\r\n    case CREATE:\r\n      return [...posts, action.payload];\r\n    default:\r\n      return posts;\r\n  }\r\n};\r\n","E:\\MERN\\mern_memories\\client\\src\\App.js",["58"],"E:\\MERN\\mern_memories\\client\\src\\components\\Form\\styles.js",[],"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\post\\Post.js",[],"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\styles.js",[],"E:\\MERN\\mern_memories\\client\\src\\components\\Form\\Form.js",[],"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\post\\styles.js",[],"E:\\MERN\\mern_memories\\client\\src\\styles.js",[],{"ruleId":"59","severity":1,"message":"60","line":35,"column":11,"nodeType":"61","messageId":"62","endLine":35,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":4,"column":1,"nodeType":"65","endLine":22,"endColumn":3},{"ruleId":"66","severity":1,"message":"67","line":28,"column":9,"nodeType":"68","endLine":28,"endColumn":81},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]