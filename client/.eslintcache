[{"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\Posts.js":"1","E:\\MERN\\mern_memories\\client\\src\\actions\\posts.js":"2","E:\\MERN\\mern_memories\\client\\src\\api\\index.js":"3","E:\\MERN\\mern_memories\\client\\src\\index.js":"4","E:\\MERN\\mern_memories\\client\\src\\reducers\\index.js":"5","E:\\MERN\\mern_memories\\client\\src\\reducers\\posts.js":"6","E:\\MERN\\mern_memories\\client\\src\\App.js":"7","E:\\MERN\\mern_memories\\client\\src\\components\\Form\\styles.js":"8","E:\\MERN\\mern_memories\\client\\src\\components\\posts\\post\\Post.js":"9","E:\\MERN\\mern_memories\\client\\src\\components\\posts\\styles.js":"10","E:\\MERN\\mern_memories\\client\\src\\components\\Form\\Form.js":"11","E:\\MERN\\mern_memories\\client\\src\\components\\posts\\post\\styles.js":"12","E:\\MERN\\mern_memories\\client\\src\\styles.js":"13","E:\\MERN\\mern_memories\\client\\src\\constants\\actionTypes.js":"14"},{"size":773,"mtime":1606895450179,"results":"15","hashOfConfig":"16"},{"size":1590,"mtime":1606938470476,"results":"17","hashOfConfig":"16"},{"size":504,"mtime":1606939103454,"results":"18","hashOfConfig":"16"},{"size":756,"mtime":1606907367964,"results":"19","hashOfConfig":"16"},{"size":297,"mtime":1606761182702,"results":"20","hashOfConfig":"16"},{"size":763,"mtime":1606936351919,"results":"21","hashOfConfig":"16"},{"size":1555,"mtime":1606983895915,"results":"22","hashOfConfig":"16"},{"size":458,"mtime":1606742354157,"results":"23","hashOfConfig":"16"},{"size":2449,"mtime":1606980200363,"results":"24","hashOfConfig":"16"},{"size":126,"mtime":1606845069592,"results":"25","hashOfConfig":"16"},{"size":3709,"mtime":1606980582192,"results":"26","hashOfConfig":"16"},{"size":1022,"mtime":1606856410509,"results":"27","hashOfConfig":"16"},{"size":488,"mtime":1606983961654,"results":"28","hashOfConfig":"16"},{"size":185,"mtime":1606739731048,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ypyv4h",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\Posts.js",[],"E:\\MERN\\mern_memories\\client\\src\\actions\\posts.js",["62"],"/** @format */\r\n\r\nimport * as api from \"../api/index\";\r\nimport {\r\n  FETCH_ALL,\r\n  CREATE,\r\n  UPDATE,\r\n  DELETE,\r\n  LIKE\r\n} from \"../constants/actionTypes\";\r\n\r\n//Actions creator\r\n\r\nexport const getPosts = () => async dispatch => {\r\n  try {\r\n    const { data } = await api.fetchPosts();\r\n    // const action = { type: FETCH_ALL, payload: data };\r\n    dispatch({ type: FETCH_ALL, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const createPost = post => async dispatch => {\r\n  try {\r\n    const data = await api.createPost(post);\r\n    dispatch({ type: CREATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const updatePost = (id, post) => async dispatch => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post);\r\n    dispatch({ type: UPDATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const deletePost = id => async dispatch => {\r\n  try {\r\n    const response = await api.deletePost(id);\r\n    dispatch({ type: DELETE, payload: id });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n// export const likePost = id => async dispatch => {\r\n//   try {\r\n//     const { data } = await api.likePost(id);\r\n//     dispatch({ type: LIKE, payload: data });\r\n//   } catch (error) {\r\n//     console.log(error.message);\r\n//   }\r\n// };\r\nexport const likePost = id => async dispatch => {\r\n  try {\r\n    const { data } = await api.likePost(id);\r\n\r\n    dispatch({ type: LIKE, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n",["63","64"],"E:\\MERN\\mern_memories\\client\\src\\api\\index.js",[],["65","66"],"E:\\MERN\\mern_memories\\client\\src\\index.js",[],"E:\\MERN\\mern_memories\\client\\src\\reducers\\index.js",[],"E:\\MERN\\mern_memories\\client\\src\\reducers\\posts.js",["67"],"E:\\MERN\\mern_memories\\client\\src\\App.js",["68"],"/** @format */\n\n// @ts-nocheck\n/** @format */\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, AppBar, Typography, Grow, Grid } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { getPosts } from \"./actions/posts\";\nimport Form from \"./components/Form/Form\";\nimport Posts from \"./components/posts/Posts\";\nimport memories from \"./images/memories.png\";\nimport useStyles from \"./styles\";\nconst App = () => {\n  const [currentId, setCurrentId] = useState(null);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getPosts());\n  }, [currentId, dispatch]);\n  return (\n    <Container maxidth=\"lg\">\n      <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n        <Typography className={classes.heading} varient=\"h2\" align=\"center\">\n          Memories\n        </Typography>\n        <img className={classes.image} src={memories} height=\"60\" width=\"200\" />\n      </AppBar>\n      <Grow in>\n        <Container className={classes.mainContainer}>\n          <Grid\n            container\n            justify=\"space-between\"\n            alignItems=\"stretch\"\n            spacing={3}\n        \n            \n          >\n            <Grid item xs={12} sm={7}>\n              <Posts setCurrentId={setCurrentId} />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <Form currentId={currentId} setCurrentId={setCurrentId} />\n            </Grid>\n          </Grid>\n        </Container>\n      </Grow>\n    </Container>\n  );\n};\n\nexport default App;\n","E:\\MERN\\mern_memories\\client\\src\\components\\Form\\styles.js",[],"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\post\\Post.js",[],"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\styles.js",[],"E:\\MERN\\mern_memories\\client\\src\\components\\Form\\Form.js",[],"E:\\MERN\\mern_memories\\client\\src\\components\\posts\\post\\styles.js",[],"E:\\MERN\\mern_memories\\client\\src\\styles.js",[],"E:\\MERN\\mern_memories\\client\\src\\constants\\actionTypes.js",[],{"ruleId":"69","severity":1,"message":"70","line":41,"column":11,"nodeType":"71","messageId":"72","endLine":41,"endColumn":19},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"73","replacedBy":"77"},{"ruleId":"75","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":4,"column":1,"nodeType":"81","endLine":25,"endColumn":3},{"ruleId":"82","severity":1,"message":"83","line":28,"column":9,"nodeType":"84","endLine":28,"endColumn":81},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["85"],"no-negated-in-lhs",["86"],["85"],["86"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]